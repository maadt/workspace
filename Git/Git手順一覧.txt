
<プロジェクトの作成>

・プロジェクト
    ここでは、Git管理するファイルのまとまりをプロジェクトと呼ぶ。

1, 任意の場所にディレクトリを作成する



<ローカルリポジトリの作成>

・リポジトリ
    データやそれらの変更点などを管理する場所のこと。Gitで管理しているデータのまとまり。
    リポジトリが作成されることでGit管理の対象になる。

・ローカルリポジトリ
    手元にあるPC内でGit管理されているデータのまとまり

1, ターミナルを起動

2, 目的のプロジェクトまで移動
    cd ~/Documents/プロジェクト名

3, 対象となるファイルをプロジェクトに移動

4, ファイルの存在を確認
    ls

5, リポジトリの作成
    git init
    リポジトリの設定をリフレッシュするために安全に行うことができる操作でもある

6, Git管理の対象になっているかを確認
    ls
    コマンドを実行すると「.git」というディレクトリが追加されている。

7, ユーザー設定(メールアドレス)
    git config --global user.email

8, ユーザー設定(ユーザー名)
    git config --global user.name



<ローカルリポジトリの削除>

1, ターミナルで目的のディレクトリに移動
2, リポジトリの削除
    rm -rf .git

<コミットの作成>

・コミット
    履歴や履歴を残すこと。Gitでの管理を行うためには、操作の履歴を残していく必要がある。

1, ステージング...変更履歴をコミットの対象にするのかを選ぶ操作
    git add -A

2, コミットしてメッセージを残す
    git commit　(-m "コメントの内容")
    任意のメッセージを残すことができる。
    設定によっては-mコマンドをつけなくても、自動でエディターが開くので終了させる場合はウィンドウを閉じる。

3, 変更点の確認
    git status
    変更を加えた状態...赤字で対象のファイルが表示される。
    ステージングした状態...「new file: ファイル名」が表示される。
    コミット後の状態...「nothing to commit, working tree clean」が表示される。

4, 変更の差分を比較する
    git diff　(対象のファイル名)
    赤字の-の行が消されたことを表し、緑字の+の行が追加されたことを表しています。
    対象としたいファイルを引数として設定することができる。

5, 履歴の確認
    git log
    ある作業まで戻したい時の判断材料になる。
    引数としてパラメータを渡したり、オプションを設定することも可能。



<ブランチ操作>

・ブランチ
    作業を枝分かれにすること。新しいブランチを作ることをブランチを切ると表現する。

1, ブランチの作成
    git branch ブランチ名

2, ブランチ一覧の表示
    git branch

3, ブランチの切り替え
    git checkout 対象のブランチ名

4, ブランチの作成と切り替え
    git checkout -b ブランチ名



 <GitHub上でリポジトリを作成>

・リモートリポジトリ
    GitHubなどのオンラインサービスを利用して、オンライン上でGit管理されているデータのまとまり。

1, GitHubにサインイン

2, 「Repositories」にある「New」をクリック

3, 「Repository name」に作成したい名前をケバブケース(文字と文字の区切りが-になっている形式)で設定

4, 公開設定：Private

5, 「creating a new file」というリンクをクリック

6, ファイル名を入力

7, プログラム文章の書き込み

8, 「Commit new file」をクリック



<プッシュ>

ローカルリポジトリで作業した内容をリモートリポジトリへ反映させることができる。

1, 紐付け
  git remote add リモート名 リモートURL
    リモート名:originやupstreamという名前がよく使われます。
    リモートURL:https://github.com/ユーザー名/プロジェクト名.git

2, プッシュ...ローカルリポジトリのデータをリモートリポジトリに反映させること。
  git push -u origin ブランチ名 (初回)
  git push (2回目以降)

3, 「Sign in with your browser」をクリック

4, GitHubに登録したメールアドレスとパスワードを入力してログイン

5, 「Authorize GitCredential Manager」と書かれている方のボタンをクリック

6, 「Branch 'master' set up to track remote brach 'master' from 'origin'.」が表示される。

7, GitHub上の「master」をクリックすると、ブランチ一覧が表示される。



<リモートリポジトリでプルリクエストしてマージする>

・マージ
    ブランチAに対してブランチBの変更内容を取り込むためのという機能

・プルリクエスト
    別のブランチを取り込むことで問題が発生しないように、マージしても問題ないかを確認する工程。

1, GitHub上の「Pull requests」クリック

2, どのブランチに対して、どのブランチをマージするのかを設定

3, コミットの内容の確認

4, 「Create pull request」をクリック

5, 必要に応じてメッセージを入力し「Create pull request」をクリック

6, リクエストした内容に問題がなければ「Merge pull request」をクリック

7, 「Confirm merge」をクリック

8, 「Code」をクリックして、ブランチに変更内容が反映されているかを確認



<リモートリポジトリでマージした内容をローカルにプッシュする>

複数人で作業を行う場合はfetch→mergeの順でプッシュする

1, ローカルリポジトリで目的のブランチに切り替える

2, リモートリポジトリとの差分の取得
    git fetch (リモート名) (ブランチ名)
    ローカルリポジトリの「リモート名/ブランチ名」というワンクッション挟んだブランチに保存してくれる。
    基本的に「リモート名 ブランチ名」　を記述して明示的にする

3, 差分をマージする
    git merge (リモート名) (ブランチ名)

4, マージした内容が追加されていることを確認する
    ls
    リモートリポジトリから取得したファイルが表示される
    基本的に「リモート名 ブランチ名」　を記述して明示的にする



<プルコマンド>

1, プル...fetchとmergeを同時に行うこと。一人で作業を行う場合に有効。
   git pull (リモート名) (ブランチ名)



<リモートリポジトリからのクローン>

1, 「Code」をクリック → リンクをコピー

2, ターミナルで保存したいディレクトリに移動
   cd ~/ディレクトリ名1/ディレクトリ名2

3, クローンする
   git clone https://github.com/(ユーザー名)/(ブランチ名).git

4, 目的のディレクトリにクローン出来ているか確認



<コンフリクトの解消>
コンフリクト...同一のファイルに対して、別々の変更を加えたときに差分が衝突することを表します。
             コンフリクトが発生した場合は対象箇所を修正してあげないとマージすることができない。

0, リモートリポジトリからローカルリポジトリへmerge

0, コンフリクト発生
以下、ターミナルに表示されるメッセージ
Auto-merging form.html
CONFLICT (content): Merge conflict in form.html
Automatic merge failed; fix conflicts and then commit the result.

1, エディタで対象のファイルを開き、コンフリクト箇所を確認
HEAD...ローカルリポジトリで加えた変更
リモートリポジトリ名...リモートリポジトリで加えた変更

2, コンフリクト箇所に修正を加える
    *上司に確認をとりながら行う

3, ステージング → コミット → プッシュを行う

4, リモートリポジトリで正しく変更されているかを確認
