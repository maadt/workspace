UML(Unified Modeling Language)
/*統一的なモデル記述言語:世界標準
プログラムの構造を視覚的にわかりやすくしたもの。
使用するクラスを洗い出したり、インスタンスの関係を考えたり、実際のシステムを構築する際に使う。
*/

UMLの種類
/*
1,構造図
　クラス図、オブジェクト図、パッケージ図、コンポーネント図etc...
2,振る舞い図
　ユースケース図、アクティビティ図、シーケンス図etc...
*/


クラス図
/*
「属性」「操作」で構成される

クラス名：そのまま記載する
抽象クラス：AbstractClass
インターフェース：上部に <<interface>> を記載、下部にインターフェース名をそのまま記載する。

属性(フィールド)：属性名:型=初期値
操作(メソッド)：操作名(引数:型):戻り値の型
//ざっくりとしたクラスの関係性を表したい場合は、属性や操作は省略される。

+...public
#...protected
~...default package
-...private
//必要に応じて可視性(アクセス修飾子)とstaticも記載できる。
//属性や操作に架線が引かれた場合 static を表す。
*/

関連
/*
1,関連のあるクラス間を実践で結ぶ
2,関係する数を記載する(=多重度)

//関連の表記について
1 　　　　　 一個
0.. または  0以上
1..*       1以上
1..3       1から3
*/

◆...集約//とある部署がなくなっても、社員は存在するため has-a関係
◇...コンポジション//会社がなかった場合は、そもそも部署も存在しないため強い関係

依存//あるメソッド内での一時的な関係
/*
1,依存関係にあるクラス間を「破線」で結ぶ。
2,一方のクラスから操作されたり、影響を受ける側に「矢印」を記載する。
*/

汎化//継承関係
/*
1,子クラスから親クラスに対して実線で結び、親クラス側に「白抜きの矢印」を記載する。
2,子クラスが複数存在する場合、矢印をまとめた方が見やすいが決まりはない。
*/

実現//インターフェイスと実装クラスの関係
/*
1,インターフェースと実装クラスを「破線」で結ぶ。
2,インターフェース側に「白抜きの矢印」を記載する。
*/

オブジェクト図//インスタンス同士の関係を表し、クラス図を補足するために用いられる。
/*
インスタンス名:クラス名
属性名:"属性値"
//書き方は以下参照
1,インスタンス名
2,インスタンス名＋クラス名
3,クラス名
//どのパターンでも下線を引く
*/

属性(フィールド)//より具体的なインスタンスとして表したいときに属性を記載する。
/*
//書き方は以下参照
1,属性名＝属性値
2,(省略)
*/

リンク//インスタンスを表す関係
/*
関係性のあるインスタンスを実線で繋ぐ
*/
