<基本構文集>

配列
型[] 変数名 = new 型[要素数];

多次元配列
型[][] 変数名 = new 型[要素数][]; //[]は配列分用意する。

if文
if (条件) {
    //処理
} if else (条件) {
    //処理
} else {
    //処理
}

switch文
switch (値) {
    case 比較する値:
        //処理
        break;
    case 比較する値: //分岐の数は任意
        //処理
        break;
    default:
    //処理
    break;
}

三項演算子
条件式 ? 条件式がtrueの時の値 : 条件式がfalseの時の値 //変数への代入など

for文
for (初期値; 条件; 再代入) {
    //処理
}

拡張for文
for (型 変数名 : 配列名) { //配列の要素を要素数だけ順番に取り出す。
    //処理
}

while文
    //int num = 0; ループカウンタ変数
while (条件) {
    //繰り返す処理
    //num++;
}

do_while文
    //int num = 0; ループカウンタ変数
do {
    //繰り返す処理 一度目は必ず実行
    //num++;
} while (条件);

繰り返しのスキップ
continue; //以降の処理は行わずに次の繰り返しへと向かう

繰り返しの終了
break; ////以降の処理は行わずに繰り返しの終了後の処理へ向かう

関数の定義
public [static] void 関数名() { //static修飾子は任意
    //処理
}

関数の呼び出し
関数名();

仮引数
public [static] void 関数名(型 仮引数) { //仮引数の数は任意 実引数を受け取る
    //処理
}

実引数
関数名(実引数); //仮引数へ渡す値

コマンドライン引数 //メインメソッドに渡す引数 ターミナルで実行
java クラス名 引数 //引数の数は任意

返り値 //呼び出し元に値を返す 関数の処理を終了する
return 値; //void型の場合return;で終了する 以降同ブロックで処理を書くとコンパイルエラーとなる

オーバーロード
関数名();
関数名(引数);
関数名(引数, 引数); //引数の数によって呼び出される関数が異なる

クラス生成
class クラス名 {
    //フィールド
    //メソッド
}
/*
クラスごとに役割を分ける
・フィールドへのアクセス(代入、出力、演算など)
・メソッドの呼び出し
・オブジェクトの取得、操作
・ファイルの保存、etc...
*/

フィールドの定義
//インスタンス変数、クラス変数の二種類がある
//インスタンス変数...インスタンスごとに値を保持する
//クラス変数...インスタンスに関わらずクラス自身が保持する
public 型 フィールド名;

bool値の反転
!変数名
