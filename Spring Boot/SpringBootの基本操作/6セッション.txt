<session>
・サーバー側にデータを一時的に保存するために用います。
・サーバー側に保存するためデータの改ざんを防ぐことができます。


<session保存までの流れ>
① セッションcookieがあったら保存
セッションcookieと言っていますが、ただのcookieです。
違いはブラウザ側の有効期限(expires)で、セッションcookieは「ブラウザを閉じたら」削除されます。

② IDがあれば一致する内容を取得
cookieの中にさまざまなデータを複数登録でできます。
セッションを利用する場合はcookie(セッションcookie)にはランダムな文字列を1つだけ保存します。
この文字列を「セッションID」と呼びます。
セッションIDはJavaが自動でユニーク(絶対に被らない値)な値を生成しています。
次で説明しますが、保存したいデータは実際にはサーバー内のファイルに保存します。
この保存先をファイル以外にすることも可能ですが、デフォルトの設定ではファイルに保存されます。
また、1ユーザー分のデータ(1つのセッションID)に対してファイルは1つできます。(ファイル名がセッションIDになっています)。
既にセッションIDがcookieにより送られてきた場合、JavaはセッションIDと同名のファイルを検索しに行きます。

③ fileやdatabaseに内容を保存
データを保存する際に、sessionでは以下の様な動きが発生します。
・セッションIDがなかった場合、一意のセッションIDを生成する
・セッションIDをファイル名としてセッションファイルを作成する
・Javaのコードを保存用に変換してファイルに書き込む

④ 内容に対して一意のIDを生成
内容というのはここではsessionに保存するデータ自体を指しています。
これをファイルに保存した後、状況によってはセッションIDを再生成してファイルの名前を上書きします。
なぜこの様な事をするのかを簡単に説明すると、結局保存するのはcookieであり、そこにはセッションIDが書かれています。

<セッションハイジャック>
cookieの機能を悪用すると、セッションIDを上書きし、他人になりすますことができます。
その結果、なりすまされたユーザーの情報流出につながります。
少しでもセッションハイジャックの可能性を下げるため、一定のタイミングにセッションIDを変更しcookieに新しいセッションIDを保存させるという方法が取られます。
最後に書き換えるのはそのためです。

⑤⑥ cookieと同じです


<Javaでsessionを利用する方法>

JavaでSessionを利用するためには次の3通りの方法があります。

・HttpSessionインターフェースを利用する
・@SessionAttributeアノテーションを利用する
・sessionスコープのBeanを利用する


<DI(DependencyInjection)>
あるクラスで他のクラスを利用するための仕組み。
@Autowiredを利用することによって引数に紐づくクラスのインスタンスを生成し、利用することができます。
「あるクラス」で「他のクラス」を利用するときには必ずこのようなコードを用意すると覚えておきましょう。
