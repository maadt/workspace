<インデックス>
目的のレコードを効率良く取得する仕組み。その名の通り索引で、レコードが格納されている場所の一覧情報を作成して保持します。

以下、実行文例での違い
SELECT * FROM 建物情報テーブル WHERE 建物面積 = 150;

<インデックスなし>
先頭の1レコード目から順番にレコードを確認して目的のレコードが見つかったときに取得する。
・フルテーブルスキャン（全表スキャン）...WHERE句の条件に応じて上から順番にすべてのレコードを確認し、条件にマッチするレコードを抽出します。
上から順番にすべてのレコードを確認するので、レコード数が増えるほど検索時間は増えていく傾向にあります。

<インデックスあり>
直接レコードを探しに行かず、まずはインデックスからレコードの格納場所を調べた上でレコードを確認しに行き目的のレコードを取得する。
先頭から1レコードずつ確認していく場合と比べて、インデックスを確認した方が短時間でレコードが取得できます。
・インデックススキャン...通常の検索同様、WHERE句の条件で検索をすることは同じですが、まずはインデックスを参照して任意のレコードが入っている場所情報を探します。
その場所情報を元に実際に該当するレコードを抽出します。まさに辞書で知りたい単語を検索する前に、索引からページ数を引く行為と同じですね。
レコード数が増えたとしても、フルテーブルスキャンから比べれば確認するレコード数を少なくできるので、通常検索よりも短い時間での抽出が可能です。

<カーディナリティ>
カラムに格納されているデータの種類がどのくらいあるのかを指す言葉で、高い、低いと表現します。
・カーディナリティが高いカラムに張るようにしましょう。
・WHERE句で使用する回数が多いカラムに張るようにしましょう。
・たくさんあるレコードの中からなるべく少ないレコードを取得したいときにインデックスを張りましょう。

<処理速度について>
実はインデックスを張ってしまうと、レコードを書き換える時に一緒にインデックスも書き換える必要が出てきます。
WHEREを使わないようなINSERT処理については確実に張ったほうが遅くなります。
UPDATEやDELETEは、レコードの抽出速度によっては速くなる場合もありますので比較検討してインデックスを張りましょう。
インデックスは張りすぎると、むしろ全体のパフォーマンスを低下させることになるので、ここぞというカラムを選択して張るようにしましょう。

<インデックスの再構築・再構成>
インデックスを使い続けていると、綺麗な構造が徐々に崩れてきて（断片化という）、むしろパフォーマンスを低下させてしまう事態が発生します。
そうならないように、インデックスの再構築・再構成を行います。
特に大量にデータを削除したときなどに再構築・再構成を行うことが効果的と言われています。ただし、再構築・再構成には時間がかかり、厳密にいつ実施するかはケースによって違うので、ここではインデックスは張って終わりではなく、再構築・再構成が必要なものなんだと知っている程度で構いません。

<インデックスの張り方>
CREATE INDEX
    `idx_age`
ON
    `users`(`age`)
;

<インデックスの確認方法>
SHOW INDEX
FROM
    `users`
;

<インデックスの削除>
DROP INDEX
    `idx_age`
ON
    `users`
;
